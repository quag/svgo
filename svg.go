// svg: generate SVG objects
//
// Anthony Starks, ajstarks@gmail.com

package svg

import (
	"fmt"
	"io"
	"os"
	"xml"
	"strings"
)

type SVG struct {
	w io.Writer
}

const svginit = `<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     width="%d" height="%d">
<!-- Generated by SVGo -->
`

func New(w io.Writer) *SVG { return &SVG{w} }

func (svg *SVG) print(a ...interface{}) (n int, errno os.Error) {
	return fmt.Fprint(svg.w, a)
}

func (svg *SVG) println(a ...interface{}) (n int, error os.Error) {
	return fmt.Fprintln(svg.w, a)
}

func (svg *SVG) printf(format string, a ...interface{}) (n int, errno os.Error) {
	return fmt.Fprintf(svg.w, format, a)
}

// Structure, Metadata, and Links

func (svg *SVG) Start(w int, h int)  { svg.printf(svginit, w, h) }
func (svg *SVG) End()                { svg.println("</svg>") }
func (svg *SVG) Gstyle(s string)     { svg.println(svg.group("style", s)) }
func (svg *SVG) Gtransform(s string) { svg.println(svg.group("transform", s)) }
func (svg *SVG) Gid(s string)        { svg.println(svg.group("id", s)) }
func (svg *SVG) Gend()               { svg.println(`</g>`) }
func (svg *SVG) Def()                { svg.println(`<defs>`) }
func (svg *SVG) DefEnd()             { svg.println(`</defs>`) }
func (svg *SVG) Desc(s string)       { svg.tt("desc", "", s) }
func (svg *SVG) Title(s string)      { svg.tt("title", "", s) }
func (svg *SVG) Link(name string, title string) {
	svg.printf("<a xlink:href=\"%s\" xlink:title=\"%s\">\n", name, title)
}
func (svg *SVG) LinkEnd() { svg.println(`</a>`) }
func (svg *SVG) Use(x int, y int, link string, s ...string) {
	svg.printf(`<use %s %s %s`, svg.loc(x, y), svg.href(link), svg.endstyle(s))
}

// Shapes

func (svg *SVG) Circle(x int, y int, r int, s ...string) {
	svg.printf(`<circle cx="%d" cy="%d" r="%d" %s`, x, y, r, svg.endstyle(s))
}

func (svg *SVG) Ellipse(x int, y int, w int, h int, s ...string) {
	svg.printf(`<ellipse cx="%d" cy="%d" rx="%d" ry="%d" %s`,
		x, y, w, h, svg.endstyle(s))
}

func (svg *SVG) Polygon(x []int, y []int, s ...string) {
	svg.poly(x, y, "polygon", s)
}

func (svg *SVG) Rect(x int, y int, w int, h int, s ...string) {
	svg.printf(`<rect %s %s`, svg.dim(x, y, w, h), svg.endstyle(s))
}

func (svg *SVG) Roundrect(x int, y int, w int, h int, rx int, ry int, s ...string) {
	svg.printf(`<rect %s rx="%d" ry="%d" %s`, svg.dim(x, y, w, h), rx, ry, svg.endstyle(s))
}

func (svg *SVG) Square(x int, y int, s int, style ...string) {
	svg.Rect(x, y, s, s, style)
}

// Curves

func (svg *SVG) Arc(sx int, sy int, ax int, ay int, r int, large bool, sweep bool, ex int, ey int, s ...string) {
	svg.printf(`%s A%s %d %s %s %s" %s`,
		svg.ptag(sx, sy), svg.coord(ax, ay), r, svg.onezero(large), svg.onezero(sweep), svg.coord(ex, ey), svg.endstyle(s))
}

func (svg *SVG) Bezier(sx int, sy int, cx int, cy int, px int, py int, ex int, ey int, s ...string) {
	svg.printf(`%s C%s %s %s" %s`,
		svg.ptag(sx, sy), svg.coord(cx, cy), svg.coord(px, py), svg.coord(ex, ey), svg.endstyle(s))
}

func (svg *SVG) Qbezier(sx int, sy int, cx int, cy int, ex int, ey int, tx int, ty int, s ...string) {
	svg.printf(`%s Q%s %s T%s" %s`,
		svg.ptag(sx, sy), svg.coord(cx, cy), svg.coord(ex, ey), svg.coord(tx, ty), svg.endstyle(s))
}

// Lines

func (svg *SVG) Line(x1 int, y1 int, x2 int, y2 int, s ...string) {
	svg.printf(`<line x1="%d" y1="%d" x2="%d" y2="%d" %s`, x1, y1, x2, y2, svg.endstyle(s))
}

func (svg *SVG) Polyline(x []int, y []int, s ...string) {
	svg.poly(x, y, "polyline", s)
}


// Image

func (svg *SVG) Image(x int, y int, w int, h int, link string, s ...string) {
	svg.printf("<image %s %s %s", svg.dim(x, y, w, h), svg.href(link), svg.endstyle(s))
}

// Text

func (svg *SVG) Text(x int, y int, t string, s ...string) {
	if len(s) > 0 {
		svg.tt("text", " "+svg.loc(x, y)+" "+svg.style(s[0]), t)
	} else {
		svg.tt("text", " "+svg.loc(x, y)+" ", t)
	}
}

// Color

func (svg *SVG) RGB(r int, g int, b int) string {
	return fmt.Sprintf(`fill:rgb(%d,%d,%d)`, r, g, b)
}
func (svg *SVG) RGBA(r int, g int, b int, a float) string {
	return fmt.Sprintf(`fill-opacity:%.2f; %s`, a, svg.RGB(r, g, b))
}

// Utility

func (svg *SVG) Grid(x int, y int, w int, h int, n int, s ...string) {

	if len(s) > 0 {
		svg.Gstyle(s[0])
	}
	for ix := x; ix <= x+w; ix += n {
		svg.Line(ix, y, ix, y+h)
	}

	for iy := y; iy <= y+h; iy += n {
		svg.Line(x, iy, x+w, iy)
	}
	if len(s) > 0 {
		svg.Gend()
	}

}

// Support functions

func (svg *SVG) style(s string) string {
	if len(s) > 0 {
		return fmt.Sprintf(`style="%s"`, s)
	}
	return s
}

func (svg *SVG) pp(x []int, y []int, tag string) {
	if len(x) != len(y) {
		return
	}
	svg.print(tag)
	for i := 0; i < len(x); i++ {
		svg.print(svg.coord(x[i], y[i]) + " ")
	}
}

func (svg *SVG) endstyle(s []string) string {
	if len(s) > 0 {
		if strings.Index(s[0], "=") > 0 {
			return s[0] + "/>\n"
		} else {
			return svg.style(s[0]) + "/>\n"
		}
	}
	return "/>\n"
}

func (svg *SVG) tt(tag string, attr string, s string) {
	svg.print("<" + tag + attr + ">")
	xml.Escape(os.Stdout, []byte(s))
	svg.println("</" + tag + ">")
}

func (svg *SVG) poly(x []int, y []int, tag string, s ...string) {
	svg.pp(x, y, "<"+tag+` points="`)
	svg.print(`" ` + svg.endstyle(s))
}

func (svg *SVG) onezero(flag bool) string {
	if flag {
		return "1"
	}
	return "0"
}

func (svg *SVG) coord(x int, y int) string { return fmt.Sprintf(`%d,%d`, x, y) }
func (svg *SVG) ptag(x int, y int) string {
	return fmt.Sprintf(`<path d="M%s`, svg.coord(x, y))
}
func (svg *SVG) loc(x int, y int) string { return fmt.Sprintf(`x="%d" y="%d"`, x, y) }
func (svg *SVG) href(s string) string    { return fmt.Sprintf(`xlink:href="%s"`, s) }
func (svg *SVG) dim(x int, y int, w int, h int) string {
	return fmt.Sprintf(`x="%d" y="%d" width="%d" height="%d"`, x, y, w, h)
}
func (svg *SVG) group(tag string, value string) string {
	return fmt.Sprintf(`<g %s="%s">`, tag, value)
}
